name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main

jobs:
  build-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [frontend, product-api, order-api]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        if: matrix.service != 'product-api'
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Set up Python
        if: matrix.service == 'product-api'
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install Dependencies
        run: |
          cd ${{ matrix.service }}
          if [ "${{ matrix.service }}" = "product-api" ]; then
            pip install -r requirements.txt
          else
            npm install
          fi

      - name: Run Tests
        run: |
          cd ${{ matrix.service }}
          if [ "${{ matrix.service }}" = "product-api" ]; then
            pytest -v || echo "No tests"
          else
            npm test --if-present || echo "No tests"
          fi

  security-scan:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run npm audit (Node.js services)
        run: |
          for dir in frontend order-api; do
            cd $dir
            npm audit --audit-level=high || true
            cd ..
          done

      - name: Run pip-audit (Python services)
        run: |
          cd product-api
          pip install pip-audit
          pip-audit || true

      - name: Run Trivy Image Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "frontend:dev"
          format: "table"
          exit-code: "0"


  build-push:
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Images
        run: |
          for service in frontend product-api order-api; do
            docker build -t ghcr.io/${{ github.repository_owner }}/${service}:staging -f ${service}/Dockerfile ${service}
            docker push ghcr.io/${{ github.repository_owner }}/${service}:staging
          done


  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-push
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: "latest"

      - name: Set up kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > ~/.kube/config

      - name: Deploy to Staging
        run: |
          kubectl apply -f k8s/namespaces.yaml
          kubectl -n staging apply -f k8s/

  approve-prod:
    runs-on: ubuntu-latest
    needs: deploy-staging
    steps:
      - name: Wait for Manual Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: ${{ github.actor }}
          issue-title: "Approve Production Deployment"
          issue-body: "Approve deployment to production for commit ${{ github.sha }}"

  deploy-prod:
    runs-on: ubuntu-latest
    needs: approve-prod
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: "latest"

      - name: Set up kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > ~/.kube/config

      - name: Deploy to Production
        run: |
          kubectl apply -f k8s/namespaces.yaml
          kubectl -n prod apply -f k8s/

  rollback:
    if: failure()
    runs-on: ubuntu-latest
    needs: deploy-prod
    steps:
      - name: Rollback Last Successful Deployment
        run: |
          echo "Rolling back production deployment..."
          kubectl rollout undo product-api -n prod || true
          kubectl rollout undo order-api -n prod || true
          kubectl rollout undo frontend -n prod || true
